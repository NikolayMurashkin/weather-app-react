{"version":3,"sources":["api.js","components/search/search.js","components/currentWeather/currentWeather.js","components/forecast/forecast.js","App.js","reportWebVitals.js","index.js"],"names":["geoApiOptions","method","headers","X-RapidAPI-Key","X-RapidAPI-Host","WEATHER_API_URL","WEATHER_API_KEY","Search","_ref","onSearchChange","_useState","useState","_useState2","Object","slicedToArray","search","setSearch","react_default","a","createElement","es","placeholder","debounceTimeout","value","onChange","searchData","loadOptions","inputValue","fetch","concat","then","response","json","options","data","map","city","latitude","longitude","label","name","countryCode","catch","err","console","error","CurrentWeather","className","weather","description","src","icon","alt","Math","round","main","temp","feels_like","wind","speed","humidity","pressure","WEEK_DAYS","Forecast","dayInAWeek","Date","getDay","forecastDays","slice","length","log","Fragment","dist_es","allowZeroExpanded","list","item","index","key","htmlFor","temp_min","temp_max","clouds","all","sea_level","App","currentWeather","setCurrentWeather","_useState3","_useState4","forecast","setForecast","search_search","_searchData$value$spl","split","_searchData$value$spl2","lat","lon","currentWeatherFetch","forecastFetch","Promise","asyncToGenerator","_regeneratorRuntime","mark","_callee","weatherResponse","forecastResponse","wrap","_context","prev","next","sent","objectSpread","stop","_x","apply","this","arguments","components_currentWeather_currentWeather","components_forecast_forecast","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.7236ced8.chunk.js","sourcesContent":["\r\nexport const geoApiOptions = {\r\n\tmethod: 'GET',\r\n\theaders: {\r\n\t\t'X-RapidAPI-Key': '15692de603mshe0705b9ca70af7bp1dbe49jsnb2a4891a5c0b',\r\n\t\t'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com'\r\n\t}\r\n};\r\n\r\nexport const GEO_API_URL = \"https://wft-geo-db.p.rapidapi.com/v1/geo\";\r\n\r\nexport const WEATHER_API_URL = \"https://api.openweathermap.org/data/2.5\";\r\n\r\nexport const WEATHER_API_KEY = \"e255fe6afb038680439f30411954e9b4\";","import React from 'react';\r\nimport { useState } from \"react\";\r\nimport { GEO_API_URL, geoApiOptions } from \"../../api\";\r\nimport { AsyncPaginate } from \"react-select-async-paginate\";\r\n\r\nconst Search = ({ onSearchChange }) => {\r\n\r\n\tconst [search, setSearch] = useState(null);\r\n\r\n\tconst loadOptions = (inputValue) => {\r\n\t\treturn fetch(\r\n\t\t\t`${GEO_API_URL}/cities?minPopulation=100000&namePrefix=${inputValue}`,\r\n\t\t\tgeoApiOptions\r\n\t\t)\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(response => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\toptions: response.data.map((city) => {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tvalue: `${city.latitude} ${city.longitude}`,\r\n\t\t\t\t\t\t\tlabel: `${city.name}, ${city.countryCode}`,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch(err => console.error(err));\r\n\t}\r\n\r\n\tconst handleOnChange = (searchData) => {\r\n\t\tsetSearch(searchData);\r\n\t\tonSearchChange(searchData);\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<AsyncPaginate\r\n\t\t\tplaceholder='Search for city in English'\r\n\t\t\tdebounceTimeout={600}\r\n\t\t\tvalue={search}\r\n\t\t\tonChange={handleOnChange}\r\n\t\t\tloadOptions={loadOptions}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport './currentWeather.css';\r\n\r\nconst CurrentWeather = ({ data }) => {\r\n\treturn (\r\n\t\t<div className=\"weather\">\r\n\t\t\t<div className=\"top\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p className=\"city\">{data.city}</p>\r\n\t\t\t\t\t<p className=\"weather-description\">{data.weather[0].description}</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<img src={`icons/${data.weather[0].icon}.png`} alt=\"weather\" className='weather-icon' />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"bottom\">\r\n\t\t\t\t<p className=\"temperature\">{Math.round(data.main.temp)}°C</p>\r\n\t\t\t\t<div className=\"details\">\r\n\t\t\t\t\t<div className=\"parameter-row\">\r\n\t\t\t\t\t\t<span className=\"parameter-label title\">Details</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"parameter-row\">\r\n\t\t\t\t\t\t<span className=\"parameter-label\">Feels like</span>\r\n\t\t\t\t\t\t<span className=\"parameter-value\">{Math.round(data.main.feels_like)}°C</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"parameter-row\">\r\n\t\t\t\t\t\t<span className=\"parameter-label\">Wind</span>\r\n\t\t\t\t\t\t<span className=\"parameter-value\">{data.wind.speed} m/s</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"parameter-row\">\r\n\t\t\t\t\t\t<span className=\"parameter-label\">Humidity</span>\r\n\t\t\t\t\t\t<span className=\"parameter-value\">{Math.round(data.main.humidity)}%</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"parameter-row\">\r\n\t\t\t\t\t\t<span className=\"parameter-label\">Pressure</span>\r\n\t\t\t\t\t\t<span className=\"parameter-value\">{Math.round(data.main.pressure)} hPa</span>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CurrentWeather;","import React from 'react';\r\nimport './forecast.css';\r\nimport {\r\n\tAccordion,\r\n\tAccordionItem,\r\n\tAccordionItemHeading,\r\n\tAccordionItemPanel,\r\n\tAccordionItemButton\r\n} from 'react-accessible-accordion';\r\n\r\n\r\nconst WEEK_DAYS = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n\r\nconst Forecast = ({ data }) => {\r\n\r\n\tconst dayInAWeek = new Date().getDay();\r\n\tconst forecastDays = WEEK_DAYS.slice(dayInAWeek, WEEK_DAYS.length).concat(WEEK_DAYS.slice(0, dayInAWeek));\r\n\r\n\tconsole.log(forecastDays);\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<label className='title'>Daily</label>\r\n\t\t\t<Accordion allowZeroExpanded>\r\n\t\t\t\t{data.list.slice(0, 7).map((item, index) => (\r\n\t\t\t\t\t<AccordionItem key={index}>\r\n\t\t\t\t\t\t<AccordionItemHeading>\r\n\t\t\t\t\t\t\t<AccordionItemButton>\r\n\t\t\t\t\t\t\t\t<div className=\"daily-item\">\r\n\t\t\t\t\t\t\t\t\t<img src={`icons/${item.weather[0].icon}.png`} alt=\"weather\" className='icon-small' />\r\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"\" className=\"day\">{forecastDays[index]}</label>\r\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"\" className=\"description\">{item.weather[0].description}</label>\r\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"\" className=\"min-max\">{Math.round(item.main.temp_min)}°C / {Math.round(item.main.temp_max)}°C </label>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</AccordionItemButton>\r\n\t\t\t\t\t\t</AccordionItemHeading>\r\n\t\t\t\t\t\t<AccordionItemPanel>\r\n\t\t\t\t\t\t\t<div className=\"daily-details-grid\">\r\n\t\t\t\t\t\t\t\t<div className=\"daily-detials-grid-item\">\r\n\t\t\t\t\t\t\t\t\t<label >Pressure</label>\r\n\t\t\t\t\t\t\t\t\t<label >{item.main.pressure} hPa</label>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"daily-detials-grid-item\">\r\n\t\t\t\t\t\t\t\t\t<label >Humidity</label>\r\n\t\t\t\t\t\t\t\t\t<label >{item.main.humidity}%</label>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"daily-detials-grid-item\">\r\n\t\t\t\t\t\t\t\t\t<label >Clouds</label>\r\n\t\t\t\t\t\t\t\t\t<label >{item.clouds.all}%</label>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"daily-detials-grid-item\">\r\n\t\t\t\t\t\t\t\t\t<label >Wind speed:</label>\r\n\t\t\t\t\t\t\t\t\t<label >{item.wind.speed} m/s</label>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"daily-detials-grid-item\">\r\n\t\t\t\t\t\t\t\t\t<label >Sea level:</label>\r\n\t\t\t\t\t\t\t\t\t<label >{item.main.sea_level}m</label>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"daily-detials-grid-item\">\r\n\t\t\t\t\t\t\t\t\t<label >Feels like:</label>\r\n\t\t\t\t\t\t\t\t\t<label >{Math.round(item.main.feels_like)}°C</label>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</AccordionItemPanel>\r\n\t\t\t\t\t</AccordionItem>\r\n\t\t\t\t))}\r\n\t\t\t</Accordion>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Forecast;","import React from 'react';\nimport { useState } from 'react';\n\nimport Search from './components/search/search';\nimport CurrentWeather from './components/currentWeather/currentWeather';\nimport Forecast from './components/forecast/forecast';\nimport { WEATHER_API_KEY, WEATHER_API_URL } from './api';\n\nimport './App.css';\n\nfunction App() {\n\tconst [currentWeather, setCurrentWeather] = useState(null);\n\tconst [forecast, setForecast] = useState(null);\n\n\tconst handleOnSearchChange = (searchData) => {\n\t\tconst [lat, lon] = searchData.value.split(\" \");\n\n\t\tconst currentWeatherFetch = fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n\t\tconst forecastFetch = fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n\n\n\t\tPromise.all([currentWeatherFetch, forecastFetch])\n\t\t\t.then(async (response) => {\n\t\t\t\tconst weatherResponse = await response[0].json();\n\t\t\t\tconst forecastResponse = await response[1].json();\n\n\t\t\t\tsetCurrentWeather({ city: searchData.label, ...weatherResponse });\n\t\t\t\tsetForecast({ city: searchData.label, ...forecastResponse });\n\t\t\t})\n\t\t\t.catch((err) => console.log(err));\n\t}\n\n\tconsole.log(currentWeather);\n\tconsole.log(forecast);\n\n\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<Search\n\t\t\t\tonSearchChange={handleOnSearchChange}\n\t\t\t/>\n\t\t\t{currentWeather && <CurrentWeather data={currentWeather} />}\n\t\t\t{forecast && <Forecast data={forecast}/>}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}