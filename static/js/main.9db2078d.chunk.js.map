{"version":3,"sources":["api.js","components/search/search.js","components/currentWeather/currentWeather.js","App.js","reportWebVitals.js","index.js"],"names":["geoApiOptions","method","headers","X-RapidAPI-Key","X-RapidAPI-Host","WEATHER_API_URL","WEATHER_API_KEY","Search","_ref","onSearchChange","_useState","useState","_useState2","Object","slicedToArray","search","setSearch","react_default","a","createElement","es","placeholder","debounceTimeout","value","onChange","searchData","loadOptions","inputValue","fetch","concat","then","response","json","options","data","map","city","latitude","longitude","label","name","countryCode","catch","err","console","error","CurrentWeather","className","weather","description","src","icon","alt","Math","round","main","temp","feels_like","wind","speed","humidity","pressure","App","currentWeather","setCurrentWeather","_useState3","_useState4","forecast","setForecast","log","search_search","_searchData$value$spl","split","_searchData$value$spl2","lat","lon","currentWeatherFetch","forecastFetch","Promise","all","asyncToGenerator","_regeneratorRuntime","mark","_callee","weatherResponse","forecastResponse","wrap","_context","prev","next","sent","objectSpread","stop","_x","apply","this","arguments","components_currentWeather_currentWeather","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.9db2078d.chunk.js","sourcesContent":["\r\nexport const geoApiOptions = {\r\n\tmethod: 'GET',\r\n\theaders: {\r\n\t\t'X-RapidAPI-Key': '15692de603mshe0705b9ca70af7bp1dbe49jsnb2a4891a5c0b',\r\n\t\t'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com'\r\n\t}\r\n};\r\n\r\nexport const GEO_API_URL = \"https://wft-geo-db.p.rapidapi.com/v1/geo\";\r\n\r\nexport const WEATHER_API_URL = \"https://api.openweathermap.org/data/2.5\";\r\n\r\nexport const WEATHER_API_KEY = \"e255fe6afb038680439f30411954e9b4\";","import React from 'react';\r\nimport { useState } from \"react\";\r\nimport { GEO_API_URL, geoApiOptions } from \"../../api\";\r\nimport { AsyncPaginate } from \"react-select-async-paginate\";\r\n\r\nconst Search = ({ onSearchChange }) => {\r\n\r\n\tconst [search, setSearch] = useState(null);\r\n\r\n\tconst loadOptions = (inputValue) => {\r\n\t\treturn fetch(\r\n\t\t\t`${GEO_API_URL}/cities?minPopulation=100000&namePrefix=${inputValue}`,\r\n\t\t\tgeoApiOptions\r\n\t\t)\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(response => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\toptions: response.data.map((city) => {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tvalue: `${city.latitude} ${city.longitude}`,\r\n\t\t\t\t\t\t\tlabel: `${city.name}, ${city.countryCode}`,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch(err => console.error(err));\r\n\t}\r\n\r\n\tconst handleOnChange = (searchData) => {\r\n\t\tsetSearch(searchData);\r\n\t\tonSearchChange(searchData);\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<AsyncPaginate\r\n\t\t\tplaceholder='Search for city'\r\n\t\t\tdebounceTimeout={600}\r\n\t\t\tvalue={search}\r\n\t\t\tonChange={handleOnChange}\r\n\t\t\tloadOptions={loadOptions}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport './currentWeather.css';\r\n\r\nconst CurrentWeather = ({ data }) => {\r\n\treturn (\r\n\t\t<div className=\"weather\">\r\n\t\t\t<div className=\"top\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p className=\"city\">{data.city}</p>\r\n\t\t\t\t\t<p className=\"weather-description\">{data.weather[0].description}</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<img src={`icons/${data.weather[0].icon}.png`} alt=\"weather\" className='weather-icon' />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"bottom\">\r\n\t\t\t\t<p className=\"temperature\">{Math.round(data.main.temp)}°C</p>\r\n\t\t\t\t<div className=\"details\">\r\n\t\t\t\t\t<div className=\"parameter-row\">\r\n\t\t\t\t\t\t<span className=\"parameter-label title\">Details</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"parameter-row\">\r\n\t\t\t\t\t\t<span className=\"parameter-label\">Feels like</span>\r\n\t\t\t\t\t\t<span className=\"parameter-value\">{Math.round(data.main.feels_like)}°C</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"parameter-row\">\r\n\t\t\t\t\t\t<span className=\"parameter-label\">Wind</span>\r\n\t\t\t\t\t\t<span className=\"parameter-value\">{data.wind.speed} m/s</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"parameter-row\">\r\n\t\t\t\t\t\t<span className=\"parameter-label\">Humidity</span>\r\n\t\t\t\t\t\t<span className=\"parameter-value\">{Math.round(data.main.humidity)}%</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"parameter-row\">\r\n\t\t\t\t\t\t<span className=\"parameter-label\">Pressure</span>\r\n\t\t\t\t\t\t<span className=\"parameter-value\">{Math.round(data.main.pressure)} hPa</span>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CurrentWeather;","import React from 'react';\nimport { useState } from 'react';\n\nimport Search from './components/search/search';\nimport CurrentWeather from './components/currentWeather/currentWeather';\nimport { WEATHER_API_KEY, WEATHER_API_URL } from './api';\n\nimport './App.css';\n\nfunction App() {\n\tconst [currentWeather, setCurrentWeather] = useState(null);\n\tconst [forecast, setForecast] = useState(null);\n\n\tconst handleOnSearchChange = (searchData) => {\n\t\tconst [lat, lon] = searchData.value.split(\" \");\n\n\t\tconst currentWeatherFetch = fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n\t\tconst forecastFetch = fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n\n\n\t\tPromise.all([currentWeatherFetch, forecastFetch])\n\t\t\t.then(async (response) => {\n\t\t\t\tconst weatherResponse = await response[0].json();\n\t\t\t\tconst forecastResponse = await response[1].json();\n\n\t\t\t\tsetCurrentWeather({ city: searchData.label, ...weatherResponse });\n\t\t\t\tsetForecast({ city: searchData.label, ...forecastResponse });\n\t\t\t})\n\t\t\t.catch((err) => console.log(err));\n\t}\n\n\tconsole.log(currentWeather);\n\tconsole.log(forecast);\n\n\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<Search\n\t\t\t\tonSearchChange={handleOnSearchChange}\n\t\t\t/>\n\t\t\t{currentWeather && <CurrentWeather data={currentWeather} />}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}